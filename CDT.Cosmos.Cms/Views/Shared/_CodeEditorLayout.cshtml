@addTagHelper *, Kendo.Mvc
@using Kendo.Mvc.UI
@using Newtonsoft.Json
@model CDT.Cosmos.Cms.Models.Interfaces.ICodeEditorViewModel
@{
    var buttons = Model.CustomButtons.ToArray();
    var fields = Model.EditorFields.ToArray();
}
<!DOCTYPE html>
<html>
<head lang="en">
    <meta name="viewport" content="width=device-width"/>
    <title>@ViewData["Title"]</title>
    <link rel="canonical" href="https://getbootstrap.com/docs/4.1/examples/sticky-footer/">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous"/>

    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2021.1.224/styles/kendo.common.min.css"/>
    <link rel="stylesheet" href="~/css/CodeEditor.css"/>
    <style>
        /* Sticky footer styles
        -------------------------------------------------- */
        html {
            min-height: 100%;
            position: relative;
        }

        body {
            background-color: #535252;
            background-image: url('/images/cosmos-back.jpg');
            background-position: center center;
            background-repeat: no-repeat;
            color: white;
            margin-bottom: 30px; /* Margin bottom by footer height */
        }

        .editor {
            bottom: 0;
            position: absolute;
            top: 82px;
            width: 100%;
        }
    </style>
    <script src="https://kendo.cdn.telerik.com/2021.1.224/js/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <script src="https://kendo.cdn.telerik.com/2021.1.224/js/kendo.all.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2021.1.224/js/kendo.aspnetmvc.min.js"></script>
</head>
<body>
    <header style="background-color: black; border-color: black;">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    @(Html.Kendo().ToolBar().Name("tbar")
                    .HtmlAttributes(new {style = "background-color: black; border: 0px"})
                    .Items(item =>
                    {
                        item.Add()
                            .Template("<div style='vertical-align:middle;'><img src='/images/vscode.png' height='20' alt='Visual Studio Code Logo'/></div>");

                        item.Add()
                            .Text("File")
                            .Type(CommandType.SplitButton)
                            .MenuButtons(btn =>
                            {
                                btn.Add().Text("Save");
                                btn.Add().Text("Close");
                                foreach (var button in buttons)
                                {
                                    btn.Add().Text(button);
                                }
                            }).Click("btnMainClick");

                        item.Add().Type(CommandType.SplitButton).Text("Help").MenuButtons(btn =>
                        {
                            btn.Add().Text("Basic Editing");
                            btn.Add().Text("Code Navigation");
                            btn.Add().Text("Reformatting Code");
                            btn.Add().Text("About Monaco");
                        }).Click("btnHelpClick");
                        item.Add().Type(CommandType.Separator);
                        item.Add().Template(@"<div><strong>Editing:</strong> " + Model.EditorTitle + "</div>");
                        item.Add().Template(@"<div><strong>Version:</strong> " + ViewData["Version"] + "</div>");
                        item.Add().Template("<span title=\"Edit sessions\" id=\"pubLbl\">Session info: </span><span id=\"articleChat\"></span>");
                    }))
                    @(Html.Kendo().TabStrip().Name("tabs")
                    .Items(tab =>
                    {
                        foreach (var field in fields)
                        {
                            tab.Add().Text(field.FieldName).Selected(field.FieldId == Model.EditingField).ImageUrl(field.IconUrl).ImageHtmlAttributes(new {style = "height:28px"});
                        }
                    }).Events(a => a.Select("tabOnSelect")))
                </div>
            </div>
        </div>
    </header>
    <div>
        <div id="editspace" class="editor"></div>
    </div>
    @RenderBody()

    <kendo-dialog name="closeEditorDialog" title="Edit Code" modal="true" visible="false" min-width="500">
        <content>
            <p>You are about to leave this page.</p>
            <h5> Any unsaved changes will be lost!</h5>
            <p>To save, click cancel and then the save button.</p>
        </content>
        <actions>
            <action text="Cancel">
            </action>
            <action action="closeEditor" primary="true" text="Yes" title="Confirm">
            </action>
        </actions>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
    </kendo-dialog>
    <kendo-dialog name="modelStateMsg" title="Save Error" modal="true" visible="@ViewData.ModelState.IsValid == false" min-width="600">
        <content>
            <div class="bg-secondary text-light">
                <h4>
                    <span class="badge badge-warning">WARNING!</span>
                </h4>
                <p>Could not save because of the following error(s):</p>
                <ul>
                    @{
                        var keys = ViewData.ModelState.Keys.ToList();
                        var values = ViewData.ModelState.Values.ToList();
                        for (var i = 0; i < ViewData.ModelState.Keys.Count(); i++)
                        {
                            var errors = values[i].Errors.ToList();
                            if (errors.Count > 0)
                            {
                                <li>
                                    @keys[i] :
                                    <ul>
                                        @{
                                            for (var c = 0; c < errors.Count; c++)
                                            {
                                                <li>
                                                    @errors[c].ErrorMessage
                                                    @if (errors[c].Exception != null)
                                                    {
                                                        <br />
                                                        <br />
                                                        <button class="btn btn-sm btn-dark" onclick="onClickShowError('@("#exception" + i + c)')">View Details</button>
                                                        <div @("id=\"exception" + i + c + "\"") style="display: none">
                                                            <div style="display: block; font-family: Courier New;">
                                                                @errors[c].Exception.Message
                                                            </div>
                                                            <code>
                                                                @errors[c].Exception.InnerException
                                                            </code>
                                                        </div>
                                                    }
                                                </li>
                                            }
                                        }
                                    </ul>
                                </li>
                            }
                        }
                    }
                </ul>
            </div>
        </content>
        <actions>
            <action text="Ok">
            </action>
        </actions>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
    </kendo-dialog>
    <kendo-dialog name="saveErrorsDialog" title="Errors Log" modal="true" visible="false" min-width="800" min-height="800">
        <content>
            <div class="bg-dark text-light" id="divErrorLog">

            </div>
        </content>
        <actions>
            <action text="Close">
            </action>
        </actions>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
    </kendo-dialog>
    <kendo-dialog name="saveChangesDialog" title="Please Wait" modal="true" visible="false" min-width="500">
        <content>
            <div>
                <p>Saving changes...</p>
            </div>
        </content>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
    </kendo-dialog>
    <kendo-dialog name="changesSavedDialog" title="Changes Saved" modal="true" visible="false" min-width="700">
        <content>
            <div>
                <p>Your changes have been successfully saved.</p>
            </div>
        </content>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
    </kendo-dialog>
    <script>
    var editor;
    var fieldId;
    // Example: var editFields = '[{"FieldId":"HeaderJavaScript","FieldName":"Header JavaScript","EditorMode":0},{"FieldId":"Content","FieldName":"Html Content","EditorMode":1},{"FieldId":"FooterJavaScript","FieldName":"Footer JavaScript","EditorMode":0}]';
    var editFields = @(Html.Raw(JsonConvert.SerializeObject(Model.EditorFields)));

    function tabOnSelect(e) {
        //alert("Selected: " + $(e.item).find("> .k-link").text());
        loadEditor($(e.item).find("> .k-link").text());
    }

    function loadEditor(id) {
        if (editor) {
            $("#" + fieldId).val(editor.getValue());
            if (editor.getModel()) {
                editor.getModel().dispose();
            }
            $("#msgBox").html("Loading...");
            editor.dispose();
            editor = null;
        }
        fieldId = null;

        $("#EditingField").val(null);
        require.config({ paths: { 'vs': '/lib/monaco-editor/min/vs' } });
        require(['vs/editor/editor.main'],
            function() {
                fieldId = id;
                var fieldInfo = editFields.find(o => o.FieldName === id);
                fieldId = fieldInfo.FieldId;

                var mode = null;
                if (fieldInfo.EditorMode === 0) {
                    mode = "javascript";
                } else {
                    mode = "html";
                }
                $("#EditingField").val(fieldId);
                var hiddenInput = $("#" + fieldId);
                var code = hiddenInput.val();
                editor = monaco.editor.create(document.getElementById('editspace'),
                    {
                        language: mode,
                        theme: "vs-dark",
                        value: code
                    });
                $("#msgBox").html("Editing: " + fieldInfo.FieldName);
            });
    }

    $("#codeForm").submit(function (e) {
        e.preventDefault(); // Prevent the form from doing a post back.
        $("#saveChangesDialog").data("kendoDialog").open();
        if (editor) {
            $("#" + fieldId).val(editor.getValue());
            if (editor.getModel()) {
                editor.getModel().dispose();
            }
            editor.dispose();
            editor = null;
        }
        //return true;
        var form = $('#codeForm');
        var action = form.attr('action');

        $.post(action,
            form.serialize(),
            function (response) {
                $("#saveChangesDialog").data("kendoDialog").close();
                if (response.IsValid) {
                    $("#changesSavedDialog").data("kendoDialog").open();
                    setTimeout(function () {
                        $("#changesSavedDialog").data("kendoDialog").close();
                    }, 1000);
                } else {
                    var errorMsg = "<h5>Error(s) detected while saving:</h5>";
                    // Invalid response.
                    $.each(response.Errors,
                        function (index, error) {
                            errorMsg = "<p>" + error.Key + "</p><ul>";
                            $.each(error.Errors,
                                function (index, innerError) {
                                    errorMsg = errorMsg + "<li>" + innerError.ErrorMessage + "</li>";
                                });
                            errorMsg = errorMsg + "</ul>";
                        });
                    $("#divErrorLog").html(errorMsg);
                    $("#saveErrorsDialog").data("kendoDialog").open();
                }
            }
        );
    });

    function btnSelectField(e) {
        fieldName = e.target.text();
        loadEditor(e.id);
    }

    function btnMainClick(e) {
        switch (e.target.text()) {
        case "Save":
            $("#codeForm").submit();
            break;
        case "Close":
            $("#closeEditorDialog").data("kendoDialog").open();
            break;
        default:
            if (typeof btnCustomClick === "function") {
                btnCustomClick(e);
            }
            break;
        }
    }

    function btnHelpClick(e) {
        switch (e.target.text()) {
        case "Basic Editing":
            window.open("https://code.visualstudio.com/docs/editor/codebasics", "_blank");
            break;
        case "Code Navigation":
            window.open("https://code.visualstudio.com/docs/editor/editingevolved", "_blank");
            break;
        case "Reformatting Code":
            window.open("https://code.visualstudio.com/docs/editor/refactoring", "_blank");
            break;
        case "About Monaco":
            window.open("https://microsoft.github.io/monaco-editor/index.html", "_blank");
            break;
        }
    }

    function onClickShowError(id) {
        $("#exceptionDetails").html($(id).html());
        $("#codeErrorDialog").data("kendoDialog").open();
    }

    function onClickShowError(id) {
        $("#exceptionDetails").html($(id).html());
        $("#editCodeDialog").data("kendoDialog").open();
    }

    $(document).ready(function() {
        var fieldId = "@Model.EditingField";
        if (fieldId !== "") {
            var fieldInfo = editFields.find(o => o.FieldId === fieldId);
            loadEditor(fieldInfo.FieldName);
        }
    });

    $(window).bind('keydown',
        function(event) {
            if (event.ctrlKey || event.metaKey) {
                switch (String.fromCharCode(event.which).toLowerCase()) {
                case 's':
                    event.preventDefault();
                    $("#codeForm").submit();
                    break;
                }
            }
        });
    </script>
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/ArticleHub.js"></script>
    <script src="/lib/monaco-editor/min/vs/loader.js"></script>
</body>
</html>